[general]

lumi = 59970 # pb^-1 CMS2018LUMI PASSING ANALYSIS QUALITY REQUIREMENT
# the lumi in fb^-1 is used only by the plotting program
# approximate to only one decimal digit
lumi_fb = 60.0 # fb^-1

outputFolder = analysis_TauTau_synch_11June2020_syst_prova

data = DTauA, DTauB, DTauC, DTauD

signals = GGHH_NLO_cHHH1_xs, GGHH_NLO_cHHH0_xs, GGHH_NLO_cHHH5_xs, VBFHH_CV_1_C2V_1_C3_1_xs , VBFHH_CV_0p5_C2V_1_C3_1_xs, VBFHH_CV_1p5_C2V_1_C3_1_xs, VBFHH_CV_1_C2V_1_C3_0_xs  ,VBFHH_CV_1_C2V_1_C3_2_xs ,VBFHH_CV_1_C2V_2_C3_1_xs  

backgrounds = DY_HM #, TTfullyLep, TTsemiLep, DY_HM,WJets_HT_0_100, WJets_HT_100_200, WJets_HT_200_400, WJets_HT_400_600, WJets_HT_600_800, WJets_HT_800_1200, WJets_HT_1200_2500, WJets_HT_2500_Inf, TWtop, TWantitop, singleTop_top, singleTop_antitop, EWKWMinus2Jets_WToLNu, EWKWPlus2Jets_WToLNu, EWKZ2Jets_ZToLL, WWTo2L2Nu, WWTo4Q, WWToLNuQQ, WZTo1L1Nu2Q, WZTo1L3Nu, WZTo2L2Q, WZTo3LNu, ZZTo2L2Nu, ZZTo2L2Q, ZZTo2Q2Nu, ZZTo4L, ZH_HBB_ZLL, ZH_HTauTau, ggHTauTau, VBFHTauTau, WplusHTauTau, WminusHTauTau, ttHJetTononBB, ttHJetToBB, WWW, WWZ, WZZ, ZZZ, TTWJetsToLNu, TTWJetsToQQ, TTZToLLNuNu, TTWW, TTWZ, TTZZ, ttHJetToTauTau, DY_LM

variables = DNNoutSM_kl_1

#tauH_pt , dau1_eta, dau2_eta, ditau_deltaR, tauH_mass, tauH_SVFIT_mass, DNNoutSM_kl_1, bH_mass, bH_pt

# SELECTIONS W/O MASS CUT
selections = s1b1jresolvedMcut_nominal, s2b0jresolvedMcut_nominal, sboostedLLMcut_nominal, VBFloose_nominal, s1b1jresolvedMcut_tesUp_DM0, s2b0jresolvedMcut_tesUp_DM0, sboostedLLMcut_tesUp_DM0, VBFloose_tesUp_DM0, s1b1jresolvedMcut_tesDown_DM0, s2b0jresolvedMcut_tesDown_DM0, sboostedLLMcut_tesDown_DM0, VBFloose_tesDown_DM0

regions    = SR

[configs]
sampleCfg = config/sampleCfg_Legacy2018.cfg
pattern   = goodsystfiles
cutCfg    = config/selectionCfg_TauTau_Legacy2018_syst.cfg


[merge]
#limits
#TT        = TTfullyHad, TTfullyLep, TTsemiLep
#WJets     = WJets_HT_0_70, WJets_HT_70_100, WJets_HT_100_200, WJets_HT_200_400, WJets_HT_400_600, WJets_HT_600_800, WJets_HT_800_1200, WJets_HT_1200_2500, WJets_HT_2500_Inf
#EWK       = EWKWMinus2Jets_WToLNu, EWKWPlus2Jets_WToLNu, EWKZ2Jets_ZToLL
#singleT   = TWtop, TWantitop, singleTop_top, singleTop_antitop
#ZH        = ZH_HBB_ZLL, ZH_HTauTau
#WW        = WWTo2L2Nu, WWTo4Q, WWToLNuQQ
#WZ        = WZTo1L1Nu2Q, WZTo1L3Nu, WZTo2L2Q, WZTo3LNu, ZZTo2L2Nu, ZZTo2L2Q, ZZTo2Q2Nu, ZZTo4L
#others        = WWW, WWZ, WZZ, ZZZ, TTZZ, TTWW, TTWZ, TTWJetsToLNu, TTWJetsToQQ, TTZToLLNuNu, ggHTauTau, VBFHTauTau,  ttHJetTononBB, ttHJetToBB, ttHJetToTauTau
#DY  = DY_LM, DY_HM

#limits_test
#TT        = TTfullyHad
DY        = DY_HM
data_obs  = DTauA, DTauB, DTauC, DTauD


############################################################################################
############################################################################################
# the following lines are used for postprocessing (pp_), i.e. not read from AnalysisHelper
# but used in subsequent steps of the analysis to combine histos, compute QCD etc..
# we keep them here to have everything at hand

[pp_merge]


## in case some histos must be rebinned. Pass as
## uniqueid = varToRebin , condition, newBinning
# [pp_rebin]
# r1 = HHKin_mass_raw         , sboostedLLMcut , 250, 1000 # a unique, big bin
# r2 = HHKin_mass_raw_tauup   , sboostedLLMcut , 250, 1000 # a unique, big bin
# r3 = HHKin_mass_raw_taudown , sboostedLLMcut , 250, 1000 # a unique, big bin
# r4 = HHKin_mass_raw_jetup   , sboostedLLMcut , 250, 1000 # a unique, big bin
# r5 = HHKin_mass_raw_jetdown , sboostedLLMcut , 250, 1000 # a unique, big bin
#
# r6  = MT2         , sboostedLLMcut , 0, 150, 500 # two bins - the lowest one has small signal
# r7  = MT2_tauup   , sboostedLLMcut , 0, 150, 500 # two bins - the lowest one has small signal
# r8  = MT2_taudown , sboostedLLMcut , 0, 150, 500 # two bins - the lowest one has small signal
# r9  = MT2_jetup   , sboostedLLMcut , 0, 150, 500 # two bins - the lowest one has small signal
# r10 = MT2_jetdown , sboostedLLMcut , 0, 150, 500 # two bins - the lowest one has small signal

## parameters for QCD evaluation
## doFitIf : condition to be respected to make rlx-to-tight QCD fit. It is used as eval(doFitIf). Use names sel, var


[pp_QCD]
#QCDname      = QCD
#SR           = SR
#yieldSB      = SStight
#shapeSB      = SSrlx
#SBtoSRfactor = 1
#regionD = SSinviso
#regionC = OSinviso
#doFitIf      = False
#fitFunc      = [0] + [1]*x


#for inverted QCD
QCDname      = QCD
SR           = SR
yieldSB      = OSinviso
shapeSB      = OSinviso
SBtoSRfactor = 1
doFitIf      = False
fitFunc      = [0] + [1]*x
regionC      = SStight
regionD      = SSinviso


[VBF_rew]
# !WARNING! The input samples MUST be in the order: node1, node2, node3, node4, node5, node19 !
# See the list 'inputSignals' to understand the link node<->couplings
doReweighting = False
inputSignals = VBFHH_CV_1_C2V_1_C3_1, VBFHH_CV_1_C2V_1_C3_0, VBFHH_CV_1_C2V_1_C3_2, VBFHH_CV_1_C2V_2_C3_1, VBFHH_CV_1_5_C2V_1_C3_1, VBFHH_CV_1_C2V_0_C3_2
target_kl  = 1
target_cv  = 0, 1
target_c2v = 1
target_xs = 1 #[pb]
